case class Car(var name: String, model: String)
{
  val carname = name
  val carmodel = model
  def printDetails():Unit = {
    println(s"Car Name = $carname or $name and car model : $carmodel")
  }
}

class Employee{
  val x = 2
  val y = 3.4
//  println("abc")
}

object caseClassDemo{
  def main(args: Array[String]): Unit = {
    val bmw = Car("BMW","440") //1. no need to write new since apply method is auto generated in case class
    bmw.printDetails()

    bmw.name = "B.M.W." //2. constr param is val by default, therefore mutator method (to overwrite a value) not generated
    //and hence you can't change the name .however if you change the constructor params to var , mutator method will be autogenerated adn you will be able to modify value in var
    bmw.printDetails()

    //3. case class autogenerate unapply method used or matching
    bmw match  {case Car(a,b) => println(a,b) }

    //4. autogenerate copy method
    val mercedes = bmw.copy(name = "Mercedes")
    mercedes.printDetails()

    //5. equals and hashcode method autogenerated
    println(bmw == mercedes)// compared by value not by reference

    //6. tostring method is autogenerated
    println(bmw)
    //for class if same is done it'll show object id and hashcode
    val employee = new Employee
    println(employee)
  }
}
